@page "/products"
@using DataEntities
@using Store.Services
@inject ProductService ProductService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]

@inject ILogger<Products> Logger
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@using Microsoft.FeatureManagement
@inject IFeatureManager FeatureManager

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<p>Here are some of our amazing outdoor products that you can purchase.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Count == 0) {
    <p><em>There is a problem loading our products. Please try again later.</em></p>
}
else
{
    <!-- Add a sales alert for customers -->
    if (saleOn)
    {
    <div class="alert alert-success" role="alert">
      Our sale is now on.
    </div>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td><img height="80" width="80" src="@imagePrefix/@product.ImageUrl" /></td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>

                    @* Update to display the discounted prices *@
                    <td>
                      @if (saleOn) {
                        <strike>@(product.Price)</strike><br>
                        @((product.Price * discountPercentage).ToString("#.##"))
                      } else {
                        @product.Price
                      }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product>? products;
    private string imagePrefix = string.Empty;
    private bool saleOn = false;
    // Store the state of the feature flag
    private decimal discountPercentage;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        imagePrefix = Configuration["ImagePrefix"];
        products = await ProductService.GetProducts();

        saleOn = await FeatureManager.IsEnabledAsync("SeasonalDiscount");
        if (saleOn) {
          discountPercentage = Convert.ToDecimal(Configuration.GetSection("eShopLite__Store__DiscountPercent").Value);
        }
    }

}
